/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../../common";

export declare namespace IAuctionHouseService {
  export type InfoEntryStruct = { hash: string; timestamp: BigNumberish };

  export type InfoEntryStructOutput = [string, BigNumber] & {
    hash: string;
    timestamp: BigNumber;
  };
}

export interface IAuctionHouseServiceInterface extends utils.Interface {
  functions: {
    "auctionsList()": FunctionFragment;
    "createAuction(string,string,address,address,uint256,uint256)": FunctionFragment;
    "fee()": FunctionFragment;
    "feeTokensList()": FunctionFragment;
    "harvestFees(address[])": FunctionFragment;
    "info()": FunctionFragment;
    "infoHistoryList()": FunctionFragment;
    "owner()": FunctionFragment;
    "setFee(uint256,uint256)": FunctionFragment;
    "setInfo(string)": FunctionFragment;
    "totalFeesPerToken(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "auctionsList"
      | "createAuction"
      | "fee"
      | "feeTokensList"
      | "harvestFees"
      | "info"
      | "infoHistoryList"
      | "owner"
      | "setFee"
      | "setInfo"
      | "totalFeesPerToken"
      | "transferOwnership"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "auctionsList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createAuction",
    values: [string, string, string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "fee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeTokensList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "harvestFees",
    values: [string[]]
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "infoHistoryList",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setInfo", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalFeesPerToken",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "auctionsList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeTokensList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "harvestFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "infoHistoryList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalFeesPerToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;

  events: {
    "CreateAuction(address)": EventFragment;
    "HarvestFees(uint256)": EventFragment;
    "SetFee(uint256,uint256)": EventFragment;
    "SetInfo(string)": EventFragment;
    "TransferOwnership(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateAuction"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HarvestFees"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetInfo"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferOwnership"): EventFragment;
}

export interface CreateAuctionEventObject {
  auction: string;
}
export type CreateAuctionEvent = TypedEvent<[string], CreateAuctionEventObject>;

export type CreateAuctionEventFilter = TypedEventFilter<CreateAuctionEvent>;

export interface HarvestFeesEventObject {
  auctionsHarvested: BigNumber;
}
export type HarvestFeesEvent = TypedEvent<[BigNumber], HarvestFeesEventObject>;

export type HarvestFeesEventFilter = TypedEventFilter<HarvestFeesEvent>;

export interface SetFeeEventObject {
  numerator: BigNumber;
  denominator: BigNumber;
}
export type SetFeeEvent = TypedEvent<[BigNumber, BigNumber], SetFeeEventObject>;

export type SetFeeEventFilter = TypedEventFilter<SetFeeEvent>;

export interface SetInfoEventObject {
  infoHash: string;
}
export type SetInfoEvent = TypedEvent<[string], SetInfoEventObject>;

export type SetInfoEventFilter = TypedEventFilter<SetInfoEvent>;

export interface TransferOwnershipEventObject {
  oldOwner: string;
  newOwner: string;
}
export type TransferOwnershipEvent = TypedEvent<
  [string, string],
  TransferOwnershipEventObject
>;

export type TransferOwnershipEventFilter =
  TypedEventFilter<TransferOwnershipEvent>;

export interface IAuctionHouseService extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAuctionHouseServiceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    auctionsList(overrides?: CallOverrides): Promise<[string[]]>;

    createAuction(
      name: string,
      infoHash: string,
      auctionToken: string,
      beneficiary: string,
      minBid: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    feeTokensList(overrides?: CallOverrides): Promise<[string[]]>;

    harvestFees(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    info(overrides?: CallOverrides): Promise<[string]>;

    infoHistoryList(
      overrides?: CallOverrides
    ): Promise<[IAuctionHouseService.InfoEntryStructOutput[]]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    setFee(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setInfo(
      infoHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalFeesPerToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  auctionsList(overrides?: CallOverrides): Promise<string[]>;

  createAuction(
    name: string,
    infoHash: string,
    auctionToken: string,
    beneficiary: string,
    minBid: BigNumberish,
    duration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fee(
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
  >;

  feeTokensList(overrides?: CallOverrides): Promise<string[]>;

  harvestFees(
    arg0: string[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  info(overrides?: CallOverrides): Promise<string>;

  infoHistoryList(
    overrides?: CallOverrides
  ): Promise<IAuctionHouseService.InfoEntryStructOutput[]>;

  owner(overrides?: CallOverrides): Promise<string>;

  setFee(
    numerator: BigNumberish,
    denominator: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setInfo(
    infoHash: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalFeesPerToken(
    token: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    auctionsList(overrides?: CallOverrides): Promise<string[]>;

    createAuction(
      name: string,
      infoHash: string,
      auctionToken: string,
      beneficiary: string,
      minBid: BigNumberish,
      duration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    fee(
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { numerator: BigNumber; denominator: BigNumber }
    >;

    feeTokensList(overrides?: CallOverrides): Promise<string[]>;

    harvestFees(arg0: string[], overrides?: CallOverrides): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<string>;

    infoHistoryList(
      overrides?: CallOverrides
    ): Promise<IAuctionHouseService.InfoEntryStructOutput[]>;

    owner(overrides?: CallOverrides): Promise<string>;

    setFee(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    setInfo(infoHash: string, overrides?: CallOverrides): Promise<boolean>;

    totalFeesPerToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "CreateAuction(address)"(auction?: null): CreateAuctionEventFilter;
    CreateAuction(auction?: null): CreateAuctionEventFilter;

    "HarvestFees(uint256)"(auctionsHarvested?: null): HarvestFeesEventFilter;
    HarvestFees(auctionsHarvested?: null): HarvestFeesEventFilter;

    "SetFee(uint256,uint256)"(
      numerator?: null,
      denominator?: null
    ): SetFeeEventFilter;
    SetFee(numerator?: null, denominator?: null): SetFeeEventFilter;

    "SetInfo(string)"(infoHash?: null): SetInfoEventFilter;
    SetInfo(infoHash?: null): SetInfoEventFilter;

    "TransferOwnership(address,address)"(
      oldOwner?: null,
      newOwner?: null
    ): TransferOwnershipEventFilter;
    TransferOwnership(
      oldOwner?: null,
      newOwner?: null
    ): TransferOwnershipEventFilter;
  };

  estimateGas: {
    auctionsList(overrides?: CallOverrides): Promise<BigNumber>;

    createAuction(
      name: string,
      infoHash: string,
      auctionToken: string,
      beneficiary: string,
      minBid: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fee(overrides?: CallOverrides): Promise<BigNumber>;

    feeTokensList(overrides?: CallOverrides): Promise<BigNumber>;

    harvestFees(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    infoHistoryList(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    setFee(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setInfo(
      infoHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalFeesPerToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    auctionsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    createAuction(
      name: string,
      infoHash: string,
      auctionToken: string,
      beneficiary: string,
      minBid: BigNumberish,
      duration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTokensList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvestFees(
      arg0: string[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    infoHistoryList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFee(
      numerator: BigNumberish,
      denominator: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setInfo(
      infoHash: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalFeesPerToken(
      token: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
