/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace IAuction {
  export type BidStruct = {
    bidder: string;
    amount: BigNumberish;
    timestamp: BigNumberish;
  };

  export type BidStructOutput = [string, BigNumber, BigNumber] & {
    bidder: string;
    amount: BigNumber;
    timestamp: BigNumber;
  };
}

export interface AuctionInterface extends utils.Interface {
  functions: {
    "allBids()": FunctionFragment;
    "auctionEnd()": FunctionFragment;
    "auctionHouseService()": FunctionFragment;
    "auctionToken()": FunctionFragment;
    "beneficiary()": FunctionFragment;
    "bid(uint256)": FunctionFragment;
    "bids(uint256)": FunctionFragment;
    "createdAt()": FunctionFragment;
    "creator()": FunctionFragment;
    "endTime()": FunctionFragment;
    "ended()": FunctionFragment;
    "harvest()": FunctionFragment;
    "highestBid()": FunctionFragment;
    "highestBidderAddress()": FunctionFragment;
    "highestBidderAmount()": FunctionFragment;
    "highestBidderTimestamp()": FunctionFragment;
    "info()": FunctionFragment;
    "minBid()": FunctionFragment;
    "name()": FunctionFragment;
    "pendingReturns(address)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "allBids"
      | "auctionEnd"
      | "auctionHouseService"
      | "auctionToken"
      | "beneficiary"
      | "bid"
      | "bids"
      | "createdAt"
      | "creator"
      | "endTime"
      | "ended"
      | "harvest"
      | "highestBid"
      | "highestBidderAddress"
      | "highestBidderAmount"
      | "highestBidderTimestamp"
      | "info"
      | "minBid"
      | "name"
      | "pendingReturns"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "allBids", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "auctionEnd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionHouseService",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "auctionToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "beneficiary",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "bid", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "bids", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "createdAt", values?: undefined): string;
  encodeFunctionData(functionFragment: "creator", values?: undefined): string;
  encodeFunctionData(functionFragment: "endTime", values?: undefined): string;
  encodeFunctionData(functionFragment: "ended", values?: undefined): string;
  encodeFunctionData(functionFragment: "harvest", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "highestBid",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidderAddress",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidderAmount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "highestBidderTimestamp",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "info", values?: undefined): string;
  encodeFunctionData(functionFragment: "minBid", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingReturns",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;

  decodeFunctionResult(functionFragment: "allBids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "auctionEnd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "auctionHouseService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "auctionToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "beneficiary",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "bid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "bids", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "createdAt", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "creator", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "endTime", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ended", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "harvest", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "highestBid", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "highestBidderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highestBidderAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "highestBidderTimestamp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "info", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "minBid", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingReturns",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "AuctionEnded(address,uint256,address)": EventFragment;
    "Harvest(uint256)": EventFragment;
    "HighestBidIncreased(address,uint256)": EventFragment;
    "Withdraw(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AuctionEnded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Harvest"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "HighestBidIncreased"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export interface AuctionEndedEventObject {
  highestBidder: string;
  highestAmount: BigNumber;
  auctionToken: string;
}
export type AuctionEndedEvent = TypedEvent<
  [string, BigNumber, string],
  AuctionEndedEventObject
>;

export type AuctionEndedEventFilter = TypedEventFilter<AuctionEndedEvent>;

export interface HarvestEventObject {
  amount: BigNumber;
}
export type HarvestEvent = TypedEvent<[BigNumber], HarvestEventObject>;

export type HarvestEventFilter = TypedEventFilter<HarvestEvent>;

export interface HighestBidIncreasedEventObject {
  bidder: string;
  amount: BigNumber;
}
export type HighestBidIncreasedEvent = TypedEvent<
  [string, BigNumber],
  HighestBidIncreasedEventObject
>;

export type HighestBidIncreasedEventFilter =
  TypedEventFilter<HighestBidIncreasedEvent>;

export interface WithdrawEventObject {
  bidder: string;
  amount: BigNumber;
}
export type WithdrawEvent = TypedEvent<
  [string, BigNumber],
  WithdrawEventObject
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface Auction extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AuctionInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    allBids(overrides?: CallOverrides): Promise<[IAuction.BidStructOutput[]]>;

    auctionEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    auctionHouseService(overrides?: CallOverrides): Promise<[string]>;

    auctionToken(overrides?: CallOverrides): Promise<[string]>;

    beneficiary(overrides?: CallOverrides): Promise<[string]>;

    bid(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        bidder: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    createdAt(overrides?: CallOverrides): Promise<[BigNumber]>;

    creator(overrides?: CallOverrides): Promise<[string]>;

    endTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    ended(overrides?: CallOverrides): Promise<[boolean]>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    highestBid(overrides?: CallOverrides): Promise<[IAuction.BidStructOutput]>;

    highestBidderAddress(overrides?: CallOverrides): Promise<[string]>;

    highestBidderAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    highestBidderTimestamp(overrides?: CallOverrides): Promise<[BigNumber]>;

    info(overrides?: CallOverrides): Promise<[string]>;

    minBid(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    pendingReturns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  allBids(overrides?: CallOverrides): Promise<IAuction.BidStructOutput[]>;

  auctionEnd(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  auctionHouseService(overrides?: CallOverrides): Promise<string>;

  auctionToken(overrides?: CallOverrides): Promise<string>;

  beneficiary(overrides?: CallOverrides): Promise<string>;

  bid(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  bids(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber] & {
      bidder: string;
      amount: BigNumber;
      timestamp: BigNumber;
    }
  >;

  createdAt(overrides?: CallOverrides): Promise<BigNumber>;

  creator(overrides?: CallOverrides): Promise<string>;

  endTime(overrides?: CallOverrides): Promise<BigNumber>;

  ended(overrides?: CallOverrides): Promise<boolean>;

  harvest(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  highestBid(overrides?: CallOverrides): Promise<IAuction.BidStructOutput>;

  highestBidderAddress(overrides?: CallOverrides): Promise<string>;

  highestBidderAmount(overrides?: CallOverrides): Promise<BigNumber>;

  highestBidderTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

  info(overrides?: CallOverrides): Promise<string>;

  minBid(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  pendingReturns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    allBids(overrides?: CallOverrides): Promise<IAuction.BidStructOutput[]>;

    auctionEnd(overrides?: CallOverrides): Promise<BigNumber>;

    auctionHouseService(overrides?: CallOverrides): Promise<string>;

    auctionToken(overrides?: CallOverrides): Promise<string>;

    beneficiary(overrides?: CallOverrides): Promise<string>;

    bid(amount: BigNumberish, overrides?: CallOverrides): Promise<boolean>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber] & {
        bidder: string;
        amount: BigNumber;
        timestamp: BigNumber;
      }
    >;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<string>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    ended(overrides?: CallOverrides): Promise<boolean>;

    harvest(overrides?: CallOverrides): Promise<BigNumber>;

    highestBid(overrides?: CallOverrides): Promise<IAuction.BidStructOutput>;

    highestBidderAddress(overrides?: CallOverrides): Promise<string>;

    highestBidderAmount(overrides?: CallOverrides): Promise<BigNumber>;

    highestBidderTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<string>;

    minBid(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    pendingReturns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "AuctionEnded(address,uint256,address)"(
      highestBidder?: null,
      highestAmount?: null,
      auctionToken?: null
    ): AuctionEndedEventFilter;
    AuctionEnded(
      highestBidder?: null,
      highestAmount?: null,
      auctionToken?: null
    ): AuctionEndedEventFilter;

    "Harvest(uint256)"(amount?: null): HarvestEventFilter;
    Harvest(amount?: null): HarvestEventFilter;

    "HighestBidIncreased(address,uint256)"(
      bidder?: null,
      amount?: null
    ): HighestBidIncreasedEventFilter;
    HighestBidIncreased(
      bidder?: null,
      amount?: null
    ): HighestBidIncreasedEventFilter;

    "Withdraw(address,uint256)"(
      bidder?: null,
      amount?: null
    ): WithdrawEventFilter;
    Withdraw(bidder?: null, amount?: null): WithdrawEventFilter;
  };

  estimateGas: {
    allBids(overrides?: CallOverrides): Promise<BigNumber>;

    auctionEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    auctionHouseService(overrides?: CallOverrides): Promise<BigNumber>;

    auctionToken(overrides?: CallOverrides): Promise<BigNumber>;

    beneficiary(overrides?: CallOverrides): Promise<BigNumber>;

    bid(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    bids(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    createdAt(overrides?: CallOverrides): Promise<BigNumber>;

    creator(overrides?: CallOverrides): Promise<BigNumber>;

    endTime(overrides?: CallOverrides): Promise<BigNumber>;

    ended(overrides?: CallOverrides): Promise<BigNumber>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    highestBid(overrides?: CallOverrides): Promise<BigNumber>;

    highestBidderAddress(overrides?: CallOverrides): Promise<BigNumber>;

    highestBidderAmount(overrides?: CallOverrides): Promise<BigNumber>;

    highestBidderTimestamp(overrides?: CallOverrides): Promise<BigNumber>;

    info(overrides?: CallOverrides): Promise<BigNumber>;

    minBid(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    pendingReturns(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    allBids(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    auctionEnd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    auctionHouseService(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    auctionToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    beneficiary(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    bid(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    bids(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createdAt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    creator(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    endTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ended(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    harvest(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    highestBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    highestBidderAddress(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    highestBidderAmount(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    highestBidderTimestamp(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    info(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBid(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingReturns(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
